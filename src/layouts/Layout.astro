---
import type { MarkdownLayoutProps } from "astro";
import "../assets/theme.css";

type Props =
  | MarkdownLayoutProps<{
      title: string;
      // author: string;
      // date: string;
    }>
  | { frontmatter: { title: string } };

const { frontmatter } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <title>{frontmatter.title}</title>
    <script type="speculationrules" id="specrules">
      {
        "prerender": [
          {
            "where": { "href_matches": "/*" },
            "eagerness": "moderate"
          }
        ],
        "prefetch": [
          {
            "where": { "href_matches": "/*" },
            "eagerness": "moderate"
          }
        ]
      }
    </script>
  </head>

  <body data-theme="light">
    <canvas id="bg"></canvas>
    <div style="display: flex; gap: 8px;">
      <a href="/"><img src="/home.gif" width="40" height="40" alt="Home" /></a>
      <img
        id="theme-img"
        role="button"
        aria-label="Toggle dark mode"
        width="40"
        height="40"
        alt="Toggle dark mode"
        style="cursor: pointer;"
      />
    </div>
    <script>
      import { store } from "../lib/utils";

      const theme = store<"dark" | "light" | "future">(
        "theme",
        window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
      );
      const themeImg = document.getElementById("theme-img") as HTMLImageElement;

      themeImg.addEventListener("click", () => {
        theme.update((theme) => {
          switch (theme) {
            case "dark":
              return "light";
            case "light":
              return "future";
            case "future":
              return "dark";
          }
        });
      });

      let stopCanvas: (() => void) | undefined;

      theme.subscribe(async (theme) => {
        document.body.dataset.theme = theme;

        stopCanvas?.();

        switch (theme) {
          case "light":
            themeImg.src = "/sun.png";
            break;

          case "dark":
            themeImg.src = "/moon.png";
            break;

          case "future":
            themeImg.src = "/future.png";
            const { start } = await import("../lib/future/shader");
            const canvas = document.getElementById("bg") as HTMLCanvasElement;
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            stopCanvas = start();
            break;
        }
      });

      setTimeout(() => {
        document.body.dataset.transition = "true";
      }, 1000);
    </script>
    <main>
      <slot />
    </main>
  </body>
</html>
